{"version":3,"sources":["app/views/PokemonCard.js","app/redux/pokemon/types.js","app/redux/pokemon/reducers.js","app/redux/pokemon/actions.js","app/redux/pokemon/operations.js","app/redux/pokemon/index.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["PokemonCard","_ref","pokemon","react_default","a","createElement","className","name","alt","src","sprites","front_shiny","height","weight","base_experience","types","createReducer","initialState","handlers","state","arguments","length","undefined","action","hasOwnProperty","type","loading","error","_createReducer","Object","defineProperty","objectSpread","payload","concat","toConsumableArray","newState","index","actions","id","response","operations","dispatch","fetch","then","json","catch","pokemonReducer","getRandomInt","max","Math","floor","random","App","fetchRandomPokemon","randomInt","_this","props","fetchPokemon","this","map","p","views_PokemonCard","key","onClick","Component","connect","pokemonOperations","Boolean","window","location","hostname","match","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6690ba28.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction PokemonCard({pokemon}) {\r\n    return <div className=\"pokemon-card\">\r\n        <h3>{pokemon.name}</h3>\r\n        <img className=\"thumb\" alt=\"pokemon img\" src={pokemon.sprites.front_shiny}/>\r\n        <dl>\r\n            <dt>Height</dt>\r\n            <dd>{pokemon.height}</dd>\r\n            <dt>Weight</dt>\r\n            <dd>{pokemon.weight}</dd>\r\n            <dt>Base Experience</dt>\r\n            <dd>{pokemon.base_experience}</dd>\r\n        </dl>\r\n    </div>\r\n}\r\n\r\nexport default PokemonCard;","const FETCH_POKEMON = 'app/pokemon/FETCH_POKEMON';\r\nconst FETCH_POKEMON_SUCCESS = 'app/pokemon/FETCH_POKEMON_SUCCESS';\r\nconst FETCH_POKEMON_FAILURE = 'app/pokemon/FETCH_POKEMON_FAILURE';\r\nconst REPLACE_POKEMON = 'app/pokemon/REPLACE_POKEMON';\r\n\r\nexport default {\r\n    FETCH_POKEMON,\r\n    FETCH_POKEMON_SUCCESS,\r\n    FETCH_POKEMON_FAILURE,\r\n    REPLACE_POKEMON,\r\n};\r\n","import types from './types';\r\n\r\nfunction createReducer(initialState, handlers) {\r\n    return function reducer(state = initialState, action) {\r\n        if (handlers.hasOwnProperty(action.type)) {\r\n            return handlers[action.type](state, action)\r\n        } else {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: null,\r\n    pokemon: [],\r\n};\r\n\r\nexport default createReducer(initialState, {\r\n    [types.FETCH_POKEMON]: state => ({\r\n        ...state,\r\n        loading: true,\r\n    }),\r\n    [types.FETCH_POKEMON_SUCCESS]: (state, payload) => ({\r\n        ...state,\r\n        loading: false,\r\n        pokemon: [\r\n            ...state.pokemon,\r\n            {...payload }\r\n        ],\r\n    }),\r\n    [types.FETCH_POKEMON_FAILURE]: (state, payload) => ({\r\n        ...state,\r\n        loading: false,\r\n        error: payload,\r\n    }),\r\n    [types.REPLACE_POKEMON]: (state, payload) => {\r\n        const newState = {\r\n            ...state,\r\n            loading: false,\r\n        };\r\n\r\n        newState.pokemon[payload.index] = payload.pokemon;\r\n\r\n        return newState;\r\n    }\r\n});\r\n","import types from './types';\r\n\r\nconst fetchPokemon = id => ({\r\n    type: types.FETCH_POKEMON,\r\n    id,\r\n});\r\n\r\nconst fetchPokemonSuccess = response => ({\r\n    type: types.FETCH_POKEMON_SUCCESS,\r\n    ...response,\r\n});\r\n\r\nconst fetchPokemonFailure = error => ({\r\n    type: types.FETCH_POKEMON_FAILURE,\r\n    error,\r\n});\r\n\r\nconst replacePokemon = (pokemon, index) => ({\r\n    type: types.REPLACE_POKEMON,\r\n    pokemon,\r\n    index,\r\n});\r\n\r\nexport default {\r\n    fetchPokemon,\r\n    fetchPokemonSuccess,\r\n    fetchPokemonFailure,\r\n    replacePokemon,\r\n};","import actions from './actions';\r\n\r\nconst fetchPokemon = ({ id, index }) => dispatch => {\r\n\r\n    dispatch(actions.fetchPokemon(id));\r\n\r\n    return fetch(`https://pokeapi.co/api/v2/pokemon/${id}/`)\r\n        .then(\r\n            response => response.json(),\r\n            error => actions.fetchPokemonFailure(error),\r\n        )\r\n        .then(json => {\r\n            if (index) dispatch(actions.replacePokemon(json, index));\r\n            else dispatch(actions.fetchPokemonSuccess(json));\r\n        })\r\n        .catch(error => actions.fetchPokemonFailure(error))\r\n};\r\n\r\nexport default {\r\n    fetchPokemon,\r\n};\r\n","import pokemonReducer from './reducers';\r\nexport { default as pokemonOperations } from './operations';\r\nexport { default as pokemonTypes } from './types';\r\nexport default pokemonReducer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PokemonCard from './app/views/PokemonCard';\r\nimport { connect } from 'react-redux';\r\nimport { pokemonOperations} from \"./app/redux/pokemon\";\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.pokemon,\r\n});\r\n\r\nconst getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  const fetchPokemon = id => dispatch(pokemonOperations.fetchPokemon(id));\r\n\r\n  return { fetchPokemon };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchPokemon({ id: 7 });\r\n    this.props.fetchPokemon({ id: 4 });\r\n    this.props.fetchPokemon({ id: 1 });\r\n  }\r\n\r\n  fetchRandomPokemon = () => {\r\n    const randomInt = getRandomInt(50);\r\n    this.props.fetchPokemon({ id: randomInt, index: 3 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <h1>Pokemon Viewer</h1>\r\n        {\r\n          this.props.pokemon.map(p => <PokemonCard key={p.id} pokemon={p}/>)\r\n        }\r\n        <button onClick={this.fetchRandomPokemon}>Random Pokemon</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport pokemon from './app/redux/pokemon';\r\n\r\nexport default combineReducers({\r\n    pokemon,\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware  } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store = {store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}